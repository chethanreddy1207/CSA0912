import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;
public class TypingSpeedCalculator extends JFrame implements KeyListener, ActionListener {
    private JTextArea userText;
    private JLabel labelScore;
    private JLabel labelText;
    private JButton btnStart;
    private JButton btnNewText;
    private JLabel labelSpeed;
    private JLabel labelAccuracy;
    private String[] texts = {
            "The greatest glory in living lies not in never falling, but in rising every time we fall.",
                    "The way to get started is to quit talking and begin doing.",
                    "Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.",
                    "If life were predictable it would cease to be life, and be without flavor.",
                    "If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.",
                    "If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.",
                    "Life is what happens when you're busy making other plans.",
                    "One day the people that don’t even believe in you will tell everyone how they met you.",
                    "The true meaning of life is to plant trees, under whose shade you do not expect to sit.",
                    "The quick brown fox jumps over the lazy dog."
            };
    private double speed = 0;
    private double accuracy = 0;
  private long timeStart = 0;
    private long timeEnd = 0;
    public TypingSpeedCalculator() {
        setTitle("Typing Speed Calculator");
        setSize(500, 500);import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;

    public class TypingSpeedCalculator extends JFrame implements KeyListener, ActionListener {

    private JTextArea userText;
    private JLabel labelScore;
    private JLabel labelText;
    private JButton btnStart;
    private JButton btnNewText;
    private JLabel labelSpeed;
    private JLabel labelAccuracy;

    private String[] texts = {
            "The greatest glory in living lies not in never falling, but in rising every time we fall.",
                    "The way to get started is to quit talking and begin doing.",
                    "Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.",
                    "If life were predictable it would cease to be life, and be without flavor.",
                    "If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.",
                    "If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.",
                    "Life is what happens when you're busy making other plans.",
                    "One day the people that don’t even believe in you will tell everyone how they met you.",
                    "The true meaning of life is to plant trees, under whose shade you do not expect to sit.",
                    "The quick brown fox jumps over the lazy dog."
            };

    private double speed = 0;
    private double accuracy = 0;
    private long timeStart = 0;
    private long timeEnd = 0;

    public TypingSpeedCalculator() {
        setTitle("Typing Speed Calculator");
        setSize(500, 500);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(6, 1));

        labelScore = new JLabel("Score: ");
        labelText = new JLabel("Welcome to typing speed calculator", SwingConstants.CENTER);
        userText = new JTextArea();
        btnStart = new JButton("Start/Restart");
        btnNewText = new JButton("New Text");
        labelSpeed = new JLabel("Your typing speed is " + speed + " LPS", SwingConstants.CENTER);
        labelAccuracy = new JLabel("Your typing accuracy is " + accuracy + " %", SwingConstants.CENTER);

        add(labelScore);
        add(labelText);
        add(userText);
        add(btnStart);
        add(btnNewText);
        add(labelSpeed);
        add(labelAccuracy);

        btnStart.addActionListener(this);
        btnNewText.addActionListener(this);

        userText.addKeyListener(this);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnStart) {
            start();
        } else if (e.getSource() == btnNewText) {
            new_text();
        }
    }

    private void start() {
        timeStart = System.currentTimeMillis();
    }

    private void stop() {
        timeEnd = System.currentTimeMillis();
        long elapsedTime = timeEnd - timeStart;
        int charsTyped = userText.getText().length();
        speed = (double) charsTyped / (elapsedTime / 1000.0);
        labelSpeed.setText("Your typing speed is " + String.format("%.2f", speed) + " LPS");

        String originalText = labelText.getText();
        String enteredText = userText.getText();
        accuracy = calculateAccuracy(originalText, enteredText);
        labelAccuracy.setText("Your typing accuracy is " + String.format("%.2f", accuracy) + " %");
    }

    private double calculateAccuracy(String originalText, String enteredText) {
        int maxLength = Math.max(originalText.length(), enteredText.length());
        double similarity = (double) (maxLength - computeLevenshteinDistance(originalText, enteredText)) / maxLength;
        return similarity * 100.0;
    }

    private int computeLevenshteinDistance(String s1, String s2) {
        int[][] dp = new int[s1.length() + 1][s2.length() + 1];
        for (int i = 0; i <= s1.length(); i++) {
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0) {
                    dp[i][j] = j;
                } else if (j == 0) {
                    dp[i][j] = i;
                } else {
                    dp[i][j] = min(dp[i - 1][j - 1] + costOfSubstitution(s1.charAt(i - 1), s2.charAt(j - 1)),
                                                               dp[i - 1][j] + 1,
                                                               dp[i][j - 1] + 1);
                }
            }
        }
        return dp[s1.length()][s2.length()];
    }

    private int costOfSubstitution(char a, char b) {
        return a == b ? 0 : 1;
    }

    private int min(int x, int y, int z) {
        return Math.min(Math.min(x, y), z);
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
        stop();
    }

    private void new_text() {
        labelText.setText(texts[new Random().nextInt(texts.length)]);
        labelScore.setText("Score: ");
        userText.setText("");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            TypingSpeedCalculator calculator = new TypingSpeedCalculator();
            calculator.setVisible(true);
        });
    }
}

        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(6, 1));
